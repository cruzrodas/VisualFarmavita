@page "/aperturacaja"

@using ProyectoFarmaVita.Models
@using ProyectoFarmaVita.Services.AperturaCajaServices
@using MudBlazor

@inject IAperturaCajaService AperturaCajaService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<h3 style="margin-bottom: 20px;">Apertura de Cajas</h3>
<a href="/aperturacaja/agregar" class="btn btn-primary mt-2">Nueva Apertura</a>

<br />

<MudPaper Elevation="3" Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-2 text-center" Align="Align.Center">Aperturas de Caja</MudText>

    <MudGrid Class="mt-2">
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Buscar por Caja, Responsable u Observaciones"
                          Variant="Variant.Outlined"
                          @bind-Value="searchTerm"
                          Immediate="true"
                          DebounceInterval="300"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Primary"
                          OnDebounceIntervalElapsed="Search" />
        </MudItem>
    </MudGrid>

    <br />

    @if (isLoading)
    {
        <div class="d-flex justify-center my-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (paginatedResult == null || paginatedResult.Items == null || !paginatedResult.Items.Any())
    {
        <MudAlert Severity="Severity.Info">No se encontraron registros.</MudAlert>
    }
    else
    {
        <MudTable T="AperturaCaja"
                  ServerData="ServerReload"
                  Dense="true"
                  Hover="true"
                  Bordered="true"
                  Loading="@isLoading"
                  RowClass="cursor-pointer"
                  Class="printable-table">

            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Caja</MudTh>
                <MudTh>Sucursal</MudTh>
                <MudTh>Responsable</MudTh>
                <MudTh>Fecha Apertura</MudTh>
                <MudTh>Fecha Cierre</MudTh>
                <MudTh>Monto Apertura</MudTh>
                <MudTh>Monto Cierre</MudTh>
                <MudTh>Estado</MudTh>
                <MudTh Class="acciones">Acciones</MudTh>
            </HeaderContent>

            <RowTemplate Context="context">
                <MudTd DataLabel="ID">@context.IdAperturaCaja</MudTd>
                <MudTd DataLabel="Caja">@context.IdCajaNavigation?.NombreCaja</MudTd>
                <MudTd DataLabel="Sucursal">@context.IdCajaNavigation?.IdSucursalNavigation?.NombreSucursal</MudTd>
                <MudTd DataLabel="Responsable">@context.IdPersonaNavigation?.Nombre @context.IdPersonaNavigation?.Apellido</MudTd>
                <MudTd DataLabel="Fecha Apertura">@context.FechaApertura?.ToString("dd/MM/yyyy HH:mm")</MudTd>
                <MudTd DataLabel="Fecha Cierre">@context.FechaCierre?.ToString("dd/MM/yyyy HH:mm") ?? "No cerrada"</MudTd>
                <MudTd DataLabel="Monto Apertura">@context.MontoApertura?.ToString("C") ?? "Q0.00"</MudTd>
                <MudTd DataLabel="Monto Cierre">@context.MontoCierre?.ToString("C") ?? "Pendiente"</MudTd>
                <MudTd DataLabel="Estado">
                    @if (context.Activa == true)
                    {
                        <MudChip T="string" Color="Color.Success" Size="Size.Small">Activa</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Default" Size="Size.Small">Cerrada</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Acciones" Class="acciones">
                    <div class="d-grid gap-2 d-md-block">
                        <a href="/aperturacaja/agregar/@context.IdAperturaCaja" class="btn btn-warning">Editar</a>
                    </div>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager RowsPerPageString="Registros por página:"
                               InfoFormat="@infoFormat"
                               PageSizeOptions="new int[] { 20, 25, 30, 40, int.MaxValue }"
                               OnPageChanged="LoadPage"
                               Class="acciones" />
            </PagerContent>
        </MudTable>
    }
</MudPaper>

@code {
    private MPaginatedResult<AperturaCaja> paginatedResult;
    private bool isLoading = false;
    private string infoFormat = "{first_item}-{last_item} de {all_items}";
    private const int PageSize = 25;
    private string searchTerm = "";
    private CancellationTokenSource cts = new();

    protected override async Task OnInitializedAsync()
    {
        cts = new CancellationTokenSource();
        await LoadPage(1, cts.Token);
    }

    private async Task LoadPage(int page, CancellationToken token)
    {
        isLoading = true;
        if (!token.IsCancellationRequested) StateHasChanged();

        try
        {
            paginatedResult = await AperturaCajaService.GetPaginatedAsync(page, PageSize, searchTerm);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar datos: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            if (!token.IsCancellationRequested) StateHasChanged();
        }
    }

    private async Task<TableData<AperturaCaja>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        isLoading = true;
        if (!cancellationToken.IsCancellationRequested) StateHasChanged();

        try
        {
            var page = state.Page + 1;
            var pageSize = state.PageSize;

            paginatedResult = await AperturaCajaService.GetPaginatedAsync(page, pageSize, searchTerm);

            return new TableData<AperturaCaja>
            {
                Items = paginatedResult.Items,
                TotalItems = paginatedResult.TotalCount
            };
        }
        catch
        {
            return new TableData<AperturaCaja> { Items = new List<AperturaCaja>(), TotalItems = 0 };
        }
        finally
        {
            isLoading = false;
            if (!cancellationToken.IsCancellationRequested) StateHasChanged();
        }
    }

    private async Task Search()
    {
        await LoadPage(1, cts.Token);
    }

    private async Task PrintTable()
    {
        await JSRuntime.InvokeVoidAsync("printTable");
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
