@page "/caja"

@using ProyectoFarmaVita.Models
@using ProyectoFarmaVita.Services.CajaServices
@using ProyectoFarmaVita.Services.AperturaCajaServices
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization

@inject ICajaService CajaService
@inject IAperturaCajaService AperturaCajaService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudPaper Elevation="3" Class="pa-6">

    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h4">Cajas</MudText>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="@(() => NavigationManager.NavigateTo("/caja/agregar"))">
            Nueva Caja
        </MudButton>
    </div>

    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudTextField T="string" Label="Buscar por Nombre"
                          Variant="Variant.Outlined"
                          @bind-Value="searchArea"
                          Immediate="true"
                          DebounceInterval="300"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Primary"
                          OnDebounceIntervalElapsed="Search" />
        </MudItem>
    </MudGrid>

    <MudDivider Class="my-4" />

    @if (isLoading)
    {
        <div class="d-flex justify-center my-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (paginatedResult == null || !paginatedResult.Items.Any())
    {
        <MudAlert Severity="Severity.Info">No se encontraron cajas.</MudAlert>
    }
    else
    {
        <MudTable T="Caja"
                  ServerData="ServerReload"
                  Dense="true"
                  Hover="true"
                  Bordered="true"
                  Loading="@isLoading"
                  RowClass="cursor-pointer"
                  Class="printable-table">

            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Nombre Caja</MudTh>
                <MudTh Class="acciones">Acciones</MudTh>
            </HeaderContent>

            <RowTemplate Context="caja">
                @{
                    var cajaAbierta = caja.AperturaCaja?.FirstOrDefault(a => a.Activa == true);
                }
                <MudTd DataLabel="ID">@caja.IdCaja</MudTd>
                <MudTd DataLabel="Nombre">@caja.NombreCaja</MudTd>

                <MudTd DataLabel="Acciones">
                    <div class="d-flex flex-wrap gap-2">

                        <!-- BOTÓN EDITAR: SIEMPRE VISIBLE -->
                        <MudButton Size="Size.Small"
                                   Color="Color.Warning"
                                   Variant="Variant.Filled"
                                   StartIcon="@Icons.Material.Filled.Edit"
                                   OnClick="@(() => NavigationManager.NavigateTo($"/caja/agregar/{caja.IdCaja}"))">
                            Editar
                        </MudButton>

                        <!-- BOTONES DE APERTURA/CIERRE: SOLO SI LA CAJA ESTÁ ACTIVA -->
                        @if (caja.Activa == true)
                        {
                            @if (cajaAbierta != null)
                            {
                                <MudButton Size="Size.Small"
                                           Color="Color.Error"
                                           Variant="Variant.Filled"
                                           StartIcon="@Icons.Material.Filled.Lock"
                                           OnClick="@(() => CerrarCaja(cajaAbierta.IdAperturaCaja))">
                                    Cerrar
                                </MudButton>
                            }
                            else
                            {
                                <MudButton Size="Size.Small"
                                           Color="Color.Success"
                                           Variant="Variant.Filled"
                                           StartIcon="@Icons.Material.Filled.LockOpen"
                                           OnClick="@(() => AbrirCaja(caja.IdCaja))">
                                    Abrir
                                </MudButton>
                            }
                        }

                        <!-- BOTÓN HISTORIAL: SIEMPRE VISIBLE -->
                        <MudButton Size="Size.Small"
                                   Color="Color.Info"
                                   Variant="Variant.Outlined"
                                   StartIcon="@Icons.Material.Filled.History"
                                   OnClick="@(() => NavigationManager.NavigateTo($"/apertura-caja/historial/{caja.IdCaja}"))">
                            Historial
                        </MudButton>
                    </div>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager RowsPerPageString="Cajas por página:"
                               InfoFormat="@infoFormat"
                               PageSizeOptions="new int[] { 20, 25, 30, 40, int.MaxValue }"
                               Class="acciones" />
            </PagerContent>
        </MudTable>
    }
</MudPaper>

<!-- Dialog para abrir caja -->
<MudDialog @bind-IsVisible="showAbrirDialog" Options="dialogOptions">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Abrir Caja</MudText>

        <MudTextField T="double"
                      @bind-Value="montoApertura"
                      Label="Monto Inicial"
                      Variant="Variant.Outlined"
                      Format="F2"
                      InputType="InputType.Number"
                      Class="mb-3"
                      Required="true"
                      HelperText="Ingrese el monto inicial en efectivo" />

        <MudTextField T="string"
                      @bind-Value="observacionesApertura"
                      Label="Observaciones (Opcional)"
                      Variant="Variant.Outlined"
                      Lines="3"
                      MaxLength="150"
                      Class="mb-3"
                      HelperText="Máximo 150 caracteres" />
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="CancelarApertura" Color="Color.Default">Cancelar</MudButton>
        <MudButton OnClick="ConfirmarApertura" Color="Color.Primary" Variant="Variant.Filled">Abrir Caja</MudButton>
    </DialogActions>
</MudDialog>

<!-- Dialog para cerrar caja -->
<MudDialog @bind-IsVisible="showCerrarDialog" Options="dialogOptions">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Cerrar Caja</MudText>

        @if (aperturaActual != null)
        {
            <MudCard Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Información de Apertura</MudText>
                    <MudText>Fecha: @aperturaActual.FechaApertura?.ToString("dd/MM/yyyy HH:mm")</MudText>
                    <MudText>Monto inicial: @aperturaActual.MontoApertura?.ToString("C")</MudText>
                    <MudText>Responsable: @($"{aperturaActual.IdPersonaNavigation?.Nombre} {aperturaActual.IdPersonaNavigation?.Apellido}")</MudText>
                </MudCardContent>
            </MudCard>
        }

        <MudTextField T="double"
                      Value="montoCierre"
                      ValueChanged="OnMontoCierreChanged"
                      Label="Monto Final"
                      Variant="Variant.Outlined"
                      Format="F2"
                      InputType="InputType.Number"
                      Class="mb-3"
                      Required="true"
                      HelperText="Ingrese el monto final en efectivo" />

        <MudTextField T="string"
                      @bind-Value="observacionesCierre"
                      Label="Observaciones (Opcional)"
                      Variant="Variant.Outlined"
                      Lines="3"
                      MaxLength="150"
                      Class="mb-3"
                      HelperText="Máximo 150 caracteres" />

        @if (diferenciaMonto != 0)
        {
            <MudAlert Severity="@(diferenciaMonto > 0 ? Severity.Info : Severity.Warning)" Class="mb-3">
                @if (diferenciaMonto > 0)
                {
                    <text>Sobrante: @diferenciaMonto.ToString("C")</text>
                }
                else
                {
                    <text>Faltante: @Math.Abs(diferenciaMonto).ToString("C")</text>
                }
            </MudAlert>
        }
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="CancelarCierre" Color="Color.Default">Cancelar</MudButton>
        <MudButton OnClick="ConfirmarCierre" Color="Color.Primary" Variant="Variant.Filled">Cerrar Caja</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MPaginatedResult<Caja> paginatedResult;
    private bool isLoading = false;
    private string infoFormat = "{first_item}-{last_item} de {all_items}";
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    private const int PageSize = 25;
    private string searchArea = "";

    // Variables para apertura de caja
    private bool showAbrirDialog = false;
    private int cajaSeleccionadaId = 0;
    private double montoApertura = 0;
    private string observacionesApertura = "";

    // Variables para cierre de caja
    private bool showCerrarDialog = false;
    private int aperturaSeleccionadaId = 0;
    private double montoCierre = 0;
    private string observacionesCierre = "";
    private double montoEsperado = 0;
    private double diferenciaMonto = 0;
    private AperturaCaja? aperturaActual = null;

    // SOLO AGREGAR ESTA VARIABLE
    private int? currentUserId = null;

    protected override async Task OnInitializedAsync()
    {
        // SOLO AGREGAR ESTA LÍNEA
        await ObtenerUsuarioActual();
        await LoadPage(1);
    }

    // SOLO AGREGAR ESTE MÉTODO
    private async Task ObtenerUsuarioActual()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                var userIdClaim = user.FindFirst("id") ?? user.FindFirst("userId") ?? user.FindFirst("sub");
                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
                {
                    currentUserId = userId;
                }
                else
                {
                    currentUserId = 1; // TEMPORAL
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error obteniendo usuario actual: {ex.Message}");
            currentUserId = 1; // Fallback temporal
        }
    }

    private async Task LoadPage(int page)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            paginatedResult = await CajaService.GetPaginatedAsync(page, PageSize, searchArea);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<TableData<Caja>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        isLoading = true;
        try
        {
            var page = state.Page + 1;
            var pageSize = state.PageSize;

            paginatedResult = await CajaService.GetPaginatedAsync(page, pageSize, searchArea);

            return new TableData<Caja>
            {
                Items = paginatedResult.Items,
                TotalItems = paginatedResult.TotalCount
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar datos: {ex.Message}", Severity.Error);
            return new TableData<Caja> { Items = new List<Caja>(), TotalItems = 0 };
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Search()
    {
        await LoadPage(1);
    }

    // Métodos para abrir caja
    private void AbrirCaja(int idCaja)
    {
        // SOLO AGREGAR ESTA VALIDACIÓN
        if (!currentUserId.HasValue)
        {
            Snackbar.Add("Error: No se pudo obtener la información del usuario actual", Severity.Error);
            return;
        }

        cajaSeleccionadaId = idCaja;
        montoApertura = 0;
        observacionesApertura = "";
        showAbrirDialog = true;
    }

    private void CancelarApertura()
    {
        showAbrirDialog = false;
        cajaSeleccionadaId = 0;
        montoApertura = 0;
        observacionesApertura = "";
    }

    private async Task ConfirmarApertura()
    {
        try
        {
            if (montoApertura < 0)
            {
                Snackbar.Add("El monto inicial no puede ser negativo", Severity.Error);
                return;
            }

            if (!string.IsNullOrEmpty(observacionesApertura) && observacionesApertura.Length > 150)
            {
                Snackbar.Add("Las observaciones no pueden exceder 150 caracteres", Severity.Error);
                return;
            }

            // SOLO CAMBIAR ESTA LÍNEA
            var idPersonaActual = currentUserId ?? 1; // Usar usuario actual o fallback

            var resultado = await AperturaCajaService.AbrirCajaAsync(
                cajaSeleccionadaId,
                idPersonaActual,
                montoApertura,
                observacionesApertura);

            if (resultado.HasValue)
            {
                Snackbar.Add("Caja abierta correctamente", Severity.Success);
                showAbrirDialog = false;
                CancelarApertura();
                await LoadPage(1);
            }
            else
            {
                Snackbar.Add("Error al abrir la caja", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    // Métodos para cerrar caja
    private async Task CerrarCaja(int idApertura)
    {
        try
        {
            var apertura = await AperturaCajaService.GetByIdAsync(idApertura);

            if (apertura == null)
            {
                Snackbar.Add("No se encontró la información de apertura", Severity.Error);
                return;
            }

            aperturaActual = apertura;
            aperturaSeleccionadaId = idApertura;
            montoCierre = 0;
            observacionesCierre = "";
            montoEsperado = apertura.MontoApertura ?? 0;
            diferenciaMonto = 0;
            showCerrarDialog = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar información de apertura: {ex.Message}", Severity.Error);
        }
    }

    private void CancelarCierre()
    {
        showCerrarDialog = false;
        aperturaSeleccionadaId = 0;
        montoCierre = 0;
        observacionesCierre = "";
        aperturaActual = null;
        diferenciaMonto = 0;
        montoEsperado = 0;
    }

    private async Task ConfirmarCierre()
    {
        try
        {
            if (!string.IsNullOrEmpty(observacionesCierre) && observacionesCierre.Length > 150)
            {
                Snackbar.Add("Las observaciones no pueden exceder 150 caracteres", Severity.Error);
                return;
            }

            var resultado = await AperturaCajaService.CerrarCajaAsync(
                aperturaSeleccionadaId,
                montoCierre,
                observacionesCierre);

            if (resultado)
            {
                Snackbar.Add("Caja cerrada correctamente", Severity.Success);
                showCerrarDialog = false;
                CancelarCierre();
                await LoadPage(1);
            }
            else
            {
                Snackbar.Add("Error al cerrar la caja", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void OnMontoCierreChanged(double value)
    {
        montoCierre = value;
        diferenciaMonto = montoCierre - montoEsperado;
        StateHasChanged();
    }
}