@page "/traslados/crear"
@page "/traslados/editar/{IdTraslado:int?}"

@using ProyectoFarmaVita.Models
@using ProyectoFarmaVita.Services.TrasladoService
@using ProyectoFarmaVita.Services.SucursalServices
@using ProyectoFarmaVita.Services.ProductoService
@using ProyectoFarmaVita.Services.EstadoServices
@using MudBlazor
@using System.ComponentModel.DataAnnotations

@inject ITrasladoService TrasladoServices
@inject ISucursalService SucursalServices
@inject IProductoService ProductoServices
@inject IEstadoService EstadoServices
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<h3 style="margin-bottom: 20px;">@(IdTraslado.HasValue ? "Editar Traslado" : "Nuevo Traslado")</h3>

<MudPaper Elevation="3" Class="pa-4">
    <EditForm Model="@trasladoForm" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudGrid>
            <!-- Información básica del traslado -->
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="trasladoForm.IdSucursalOrigen"
                           Label="Sucursal Origen"
                           Required="true"
                           Variant="Variant.Outlined"
                           T="int?">
                    <MudSelectItem Value="@((int?)null)">Seleccionar sucursal origen</MudSelectItem>
                    @if (sucursales?.Any() == true)
                    {
                        @foreach (var sucursal in sucursales)
                        {
                            <MudSelectItem Value="@((int?)sucursal.IdSucursal)">@sucursal.NombreSucursal</MudSelectItem>
                        }
                    }
                </MudSelect>
                <ValidationMessage For="@(() => trasladoForm.IdSucursalOrigen)" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="trasladoForm.IdSucursalDestino"
                           Label="Sucursal Destino"
                           Required="true"
                           Variant="Variant.Outlined"
                           T="int?">
                    <MudSelectItem Value="@((int?)null)">Seleccionar sucursal destino</MudSelectItem>
                    @if (sucursales?.Any() == true)
                    {
                        @foreach (var sucursal in sucursales.Where(s => s.IdSucursal != trasladoForm.IdSucursalOrigen))
                        {
                            <MudSelectItem Value="@((int?)sucursal.IdSucursal)">@sucursal.NombreSucursal</MudSelectItem>
                        }
                    }
                </MudSelect>
                <ValidationMessage For="@(() => trasladoForm.IdSucursalDestino)" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudDatePicker @bind-Date="fechaTraslado"
                               Label="Fecha del Traslado"
                               Variant="Variant.Outlined"
                               DateFormat="dd/MM/yyyy"
                               Required="true" />
            </MudItem>

            <!-- CORREGIDO: Mover el MudSelect de Estado dentro de MudItem -->
            <MudItem xs="12" sm="6">
                <MudSelect T="int?"
                           Label="Estado"
                           Required="true"
                           Variant="Variant.Outlined"
                           Value="trasladoForm.IdEstadoTraslado"
                           ValueChanged="OnEstadoChanged">
                    @if (estados?.Any() == true)
                    {
                        @foreach (var estado in estados)
                        {
                            <MudSelectItem Value="@((int?)estado.IdEstado)">
                                @estado.Estado1
                            </MudSelectItem>
                        }
                    }
                </MudSelect>
                <ValidationMessage For="@(() => trasladoForm.IdEstadoTraslado)" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="trasladoForm.Observaciones"
                              Label="Observaciones"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="150"
                              Counter="150" />
            </MudItem>

            <!-- Productos del traslado -->
            <MudItem xs="12">
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h6" Class="mb-3">Productos a Trasladar</MudText>
            </MudItem>

            <!-- Agregar producto -->
            <MudItem xs="12">
                <MudCard Elevation="2" Class="pa-4 mb-4">
                    <MudGrid>
                        <MudItem xs="12" sm="5">
                            <MudSelect @bind-Value="productoSeleccionado"
                                       Label="Seleccionar Producto"
                                       Variant="Variant.Outlined"
                                       T="int?">
                                <MudSelectItem Value="@((int?)null)">Seleccionar producto</MudSelectItem>
                                @if (productosDisponibles?.Any() == true)
                                {
                                    @foreach (var producto in productosDisponibles)
                                    {
                                        <MudSelectItem Value="@((int?)producto.IdProducto)">
                                            @producto.NombreProducto
                                        </MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudNumericField @bind-Value="cantidadProducto"
                                             Label="Cantidad"
                                             Variant="Variant.Outlined"
                                             Min="1" />
                        </MudItem>
                        <MudItem xs="12" sm="4" Class="d-flex align-center">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Success"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       OnClick="AgregarProducto"
                                       Disabled="@(!PuedeAgregarProducto())">
                                Agregar Producto
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCard>
            </MudItem>

            <!-- Lista de productos agregados -->
            @if (detallesTraslado?.Any() == true)
            {
                <MudItem xs="12">
                    <MudTable T="TrasladoDetalle" Items="@detallesTraslado" Dense="true" Hover="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Producto</MudTh>
                            <MudTh>Cantidad</MudTh>
                            <MudTh>Acciones</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="detalle">
                            <MudTd DataLabel="Producto">
                                @{
                                    var producto = productosDisponibles?.FirstOrDefault(p => p.IdProducto == detalle.IdProducto);
                                }
                                <MudText>@(producto?.NombreProducto ?? "Producto no encontrado")</MudText>
                            </MudTd>
                            <MudTd DataLabel="Cantidad">
                                <MudText>@detalle.Cantidad</MudText>
                            </MudTd>
                            <MudTd DataLabel="Acciones">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => EliminarProducto(detalle))"
                                               Title="Eliminar producto" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
            }
            else
            {
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Info">
                        <MudText>No se han agregado productos al traslado.</MudText>
                    </MudAlert>
                </MudItem>
            }

            <!-- Botones de acción -->
            <MudItem xs="12" Class="d-flex justify-end mt-4">
                <MudButton Variant="Variant.Text"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           OnClick="Cancelar"
                           Class="mr-3">
                    Cancelar
                </MudButton>
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Save"
                           Disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Guardando...</MudText>
                    }
                    else
                    {
                        <MudText>@(IdTraslado.HasValue ? "Actualizar" : "Crear") Traslado</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudPaper>

@code {
    [Parameter] public int? IdTraslado { get; set; }

    private TrasladoFormModel trasladoForm = new();
    private List<Sucursal> sucursales = new();
    private List<Estado> estados = new();
    private List<Producto> productosDisponibles = new();
    private List<TrasladoDetalle> detallesTraslado = new();
    private List<TrasladoDetalle> detalles = new();

    private bool isSubmitting = false;
    private DateTime? fechaTraslado = DateTime.Now;
    private int? productoSeleccionado = null;
    private int cantidadProducto = 1;
    private int? estadoAnterior = null;

    // Modelo para validaciones
    public class TrasladoFormModel
    {
        [Required(ErrorMessage = "La sucursal origen es requerida")]
        public int? IdSucursalOrigen { get; set; }

        [Required(ErrorMessage = "La sucursal destino es requerida")]
        public int? IdSucursalDestino { get; set; }

        [Required(ErrorMessage = "El estado es requerido")]
        public int? IdEstadoTraslado { get; set; }

        [StringLength(150, ErrorMessage = "Las observaciones no pueden exceder los 150 caracteres")]
        public string? Observaciones { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();

        if (IdTraslado.HasValue)
        {
            await LoadTrasladoForEdit();
        }
        else
        {
            await SetDefaultValues();
        }
    }

    private async Task LoadInitialData()
    {
        try
        {
            // Cargar sucursales
            sucursales = await SucursalServices.GetAllAsync();

            // Cargar estados
            estados = await EstadoServices.GetAllAsync();

            // Cargar productos
            productosDisponibles = await ProductoServices.GetActivosAsync();

            Console.WriteLine($"Datos cargados - Sucursales: {sucursales.Count}, Estados: {estados.Count}, Productos: {productosDisponibles.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos iniciales: {ex.Message}");
            Snackbar.Add("Error al cargar los datos del formulario", Severity.Error);
        }
    }

    private async Task SetDefaultValues()
    {
        try
        {
            // Establecer estado por defecto (Pendiente)
            var estadoPendiente = estados?.FirstOrDefault(e => e.Estado1?.ToLower() == "pendiente");
            if (estadoPendiente != null)
            {
                trasladoForm.IdEstadoTraslado = estadoPendiente.IdEstado;
                estadoAnterior = estadoPendiente.IdEstado;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al establecer valores por defecto: {ex.Message}");
        }
    }

    // CORREGIDO: Método mejorado para cargar traslado en edición
    private async Task LoadTrasladoForEdit()
    {
        try
        {
            Console.WriteLine($"=== CARGANDO TRASLADO PARA EDICIÓN - ID: {IdTraslado.Value} ===");

            var traslado = await TrasladoServices.GetByIdAsync(IdTraslado.Value);
            if (traslado != null)
            {
                trasladoForm.IdSucursalOrigen = traslado.IdSucursalOrigen;
                trasladoForm.IdSucursalDestino = traslado.IdSucursalDestino;
                trasladoForm.IdEstadoTraslado = traslado.IdEstadoTraslado;
                trasladoForm.Observaciones = traslado.Observaciones;
                fechaTraslado = traslado.FechaTraslado;
                estadoAnterior = traslado.IdEstadoTraslado;

                Console.WriteLine($"Datos del traslado cargados:");
                Console.WriteLine($"  - Origen: {traslado.IdSucursalOrigen}");
                Console.WriteLine($"  - Destino: {traslado.IdSucursalDestino}");
                Console.WriteLine($"  - Estado: {traslado.IdEstadoTraslado}");
                Console.WriteLine($"  - Fecha: {traslado.FechaTraslado}");

                // USAR MÉTODO DE DEBUGGING PRIMERO
                Console.WriteLine("=== EJECUTANDO DEBUG DE DETALLES ===");
                var detallesDebug = await TrasladoServices.DebugGetDetallesByTrasladoIdAsync(IdTraslado.Value);

                // Si el debug no encuentra nada, probar método simple
                if (!detallesDebug.Any())
                {
                    Console.WriteLine("=== DEBUG NO ENCONTRÓ DETALLES, PROBANDO MÉTODO SIMPLE ===");
                    var detallesSimple = await TrasladoServices.GetDetallesSimpleAsync(IdTraslado.Value);
                    detalles = detallesSimple;
                }
                else
                {
                    detalles = detallesDebug;
                }

                // Si aún no hay detalles, probar método original
                if (!detalles.Any())
                {
                    Console.WriteLine("=== PROBANDO MÉTODO ORIGINAL ===");
                    var detallesOriginal = await TrasladoServices.GetDetallesByTrasladoIdAsync(IdTraslado.Value);
                    detalles = detallesOriginal;
                }

                if (detalles?.Any() == true)
                {
                    detallesTraslado.Clear();
                    detallesTraslado.AddRange(detalles);
                    Console.WriteLine($"✅ DETALLES CARGADOS EXITOSAMENTE: {detallesTraslado.Count} productos");

                    foreach (var detalle in detallesTraslado)
                    {
                        var producto = productosDisponibles?.FirstOrDefault(p => p.IdProducto == detalle.IdProducto);
                        Console.WriteLine($"  - Producto: {detalle.IdProducto} ({producto?.NombreProducto ?? "No encontrado"}), Cantidad: {detalle.Cantidad}");
                    }
                }
                else
                {
                    Console.WriteLine("❌ NO SE ENCONTRARON DETALLES PARA EL TRASLADO");
                    detallesTraslado = new List<TrasladoDetalle>();
                }

                // Forzar actualización de la UI
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("❌ NO SE ENCONTRÓ EL TRASLADO");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ ERROR al cargar traslado para edición: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            Snackbar.Add("Error al cargar el traslado", Severity.Error);
            NavigationManager.NavigateTo("/traslados");
        }
    }

    private bool PuedeAgregarProducto()
    {
        return productoSeleccionado.HasValue &&
               cantidadProducto > 0 &&
               !detallesTraslado.Any(d => d.IdProducto == productoSeleccionado.Value);
    }

    private void AgregarProducto()
    {
        if (PuedeAgregarProducto())
        {
            var estadoPendiente = estados?.FirstOrDefault(e => e.Estado1?.ToLower() == "pendiente");

            var detalle = new TrasladoDetalle
            {
                IdProducto = productoSeleccionado.Value,
                Cantidad = cantidadProducto,
                IdEstado = estadoPendiente?.IdEstado ?? 1,
                IdTraslado = IdTraslado
            };

            detallesTraslado.Add(detalle);

            // Limpiar selección
            productoSeleccionado = null;
            cantidadProducto = 1;

            Console.WriteLine($"Producto agregado. Total productos: {detallesTraslado.Count}");
            StateHasChanged();
        }
    }

    private void EliminarProducto(TrasladoDetalle detalle)
    {
        detallesTraslado.Remove(detalle);
        Console.WriteLine($"Producto eliminado. Total productos: {detallesTraslado.Count}");
        StateHasChanged();
    }

    private async Task OnEstadoChanged(int? nuevoEstado)
    {
        trasladoForm.IdEstadoTraslado = nuevoEstado;

        // Si cambia a completado, mostrar advertencia
        if (nuevoEstado.HasValue)
        {
            var estado = estados?.FirstOrDefault(e => e.IdEstado == nuevoEstado.Value);
            if (estado?.Estado1?.ToLower() == "completado")
            {
                Snackbar.Add("Al marcar como completado se actualizarán automáticamente los inventarios", Severity.Warning);
            }
        }

        // Forzar actualización de la UI
        StateHasChanged();
    }

    private async Task OnValidSubmit()
    {
        if (isSubmitting) return;

        // Validaciones adicionales
        if (trasladoForm.IdSucursalOrigen == trasladoForm.IdSucursalDestino)
        {
            Snackbar.Add("La sucursal origen y destino no pueden ser la misma", Severity.Error);
            return;
        }

        if (!detallesTraslado.Any())
        {
            Snackbar.Add("Debe agregar al menos un producto al traslado", Severity.Error);
            return;
        }

        isSubmitting = true;
        StateHasChanged();

        try
        {
            var traslado = new Traslado
            {
                IdTraslado = IdTraslado ?? 0,
                IdSucursalOrigen = trasladoForm.IdSucursalOrigen,
                IdSucursalDestino = trasladoForm.IdSucursalDestino,
                FechaTraslado = fechaTraslado,
                IdEstadoTraslado = trasladoForm.IdEstadoTraslado,
                Observaciones = trasladoForm.Observaciones
            };

            bool success;

            if (IdTraslado.HasValue)
            {
                Console.WriteLine($"Actualizando traslado existente - ID: {IdTraslado.Value}");

                // Actualizar traslado existente
                success = await TrasladoServices.AddUpdateAsync(traslado);

                if (success)
                {
                    Console.WriteLine("Traslado actualizado, actualizando detalles...");

                    // Eliminar detalles existentes
                    var detallesExistentes = await TrasladoServices.GetDetallesByTrasladoIdAsync(IdTraslado.Value);
                    foreach (var detalleExistente in detallesExistentes)
                    {
                        await TrasladoServices.DeleteDetalleAsync(detalleExistente.IdTrasladoDetalle);
                    }

                    // Agregar nuevos detalles
                    foreach (var detalle in detallesTraslado)
                    {
                        detalle.IdTraslado = IdTraslado.Value;
                        var detalleSuccess = await TrasladoServices.AddDetalleAsync(detalle);
                        Console.WriteLine($"Detalle agregado: {detalleSuccess}");
                    }

                    // Verificar si cambió a completado y procesar inventarios
                    await ProcessInventoryIfCompleted(traslado);
                }
            }
            else
            {
                Console.WriteLine("Creando nuevo traslado con detalles...");

                // Crear nuevo traslado con detalles
                success = await TrasladoServices.CreateTrasladoWithDetallesAsync(traslado, detallesTraslado);

                if (success)
                {
                    Console.WriteLine("Traslado creado exitosamente");
                    // Procesar inventarios si se crea directamente como completado
                    await ProcessInventoryIfCompleted(traslado);
                }
            }

            if (success)
            {
                Snackbar.Add(IdTraslado.HasValue ? "Traslado actualizado exitosamente" : "Traslado creado exitosamente", Severity.Success);
                NavigationManager.NavigateTo("/traslados");
            }
            else
            {
                Snackbar.Add("Error al guardar el traslado", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar traslado: {ex.Message}");
            Snackbar.Add("Error al guardar el traslado", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task ProcessInventoryIfCompleted(Traslado traslado)
    {
        try
        {
            // Verificar si el estado cambió a completado
            var estadoCompletado = estados?.FirstOrDefault(e => e.Estado1?.ToLower() == "completado");
            var estadoAnteriorObj = estados?.FirstOrDefault(e => e.IdEstado == estadoAnterior);

            bool cambioACompletado = traslado.IdEstadoTraslado == estadoCompletado?.IdEstado &&
                                   estadoAnterior != estadoCompletado?.IdEstado;

            if (cambioACompletado)
            {
                Console.WriteLine("Procesando inventarios - traslado marcado como completado");

                var processingSuccess = await TrasladoServices.ProcessTrasladoAsync(traslado.IdTraslado);

                if (processingSuccess)
                {
                    Snackbar.Add("Inventarios actualizados correctamente", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Error al actualizar inventarios. Verifique el stock disponible.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al procesar inventarios: {ex.Message}");
            Snackbar.Add("Error al procesar los inventarios", Severity.Warning);
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/traslados");
    }
}