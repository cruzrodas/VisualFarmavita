@page "/traslados"

@using ProyectoFarmaVita.Models
@using ProyectoFarmaVita.Services.TrasladoService
@using ProyectoFarmaVita.Services.SucursalServices
@using MudBlazor

@inject ITrasladoService TrasladoServices
@inject ISucursalService SucursalServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudPaper Elevation="3" Class="pa-4">
        <MudGrid>
            <!-- Header Section -->
            <MudItem xs="12" Class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h4" Class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Class="mr-3" Size="Size.Large" />
                    Gestión de Traslados
                </MudText>
                <MudButtonGroup Variant="Variant.Filled">
                    <MudButton Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="@(() => NavigationManager.NavigateTo("/traslados/crear"))">
                        Nuevo Traslado
                    </MudButton>
                    <MudButton Color="Color.Secondary"
                               StartIcon="@Icons.Material.Filled.Pending"
                               OnClick="@(() => FiltrarPorEstado(1))">
                        Pendientes
                    </MudButton>
                </MudButtonGroup>
            </MudItem>

            <!-- Filters Section -->
            <MudItem xs="12">
                <MudExpansionPanels Elevation="2" Class="mb-4">
                    <MudExpansionPanel Icon="@Icons.Material.Filled.FilterList" Text="Filtros de Búsqueda">
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="3">
                                <MudTextField @bind-Value="searchString"
                                              Label="Buscar"
                                              Placeholder="Sucursal, observaciones..."
                                              Adornment="Adornment.Start"
                                              AdornmentIcon="@Icons.Material.Filled.Search"
                                              IconSize="Size.Medium"
                                              Clearable="true"
                                              DebounceInterval="500"
                                              OnDebounceIntervalElapsed="@OnSearchChanged" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="2">
                                <MudSelect @bind-Value="filtroSucursalOrigen"
                                           Label="Sucursal Origen"
                                           T="int?"
                                           Clearable="true"
                                           AdornmentIcon="@Icons.Material.Filled.Business"
                                           Adornment="Adornment.Start">
                                    @if (sucursales?.Any() == true)
                                    {
                                        @foreach (var sucursal in sucursales)
                                        {
                                            <MudSelectItem T="int?" Value="@((int?)sucursal.IdSucursal)">@sucursal.NombreSucursal</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="2">
                                <MudSelect @bind-Value="filtroSucursalDestino"
                                           Label="Sucursal Destino"
                                           T="int?"
                                           Clearable="true"
                                           AdornmentIcon="@Icons.Material.Filled.Store"
                                           Adornment="Adornment.Start">
                                    @if (sucursales?.Any() == true)
                                    {
                                        @foreach (var sucursal in sucursales)
                                        {
                                            <MudSelectItem T="int?" Value="@((int?)sucursal.IdSucursal)">@sucursal.NombreSucursal</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="2">
                                <MudSelect @bind-Value="filtroEstado"
                                           Label="Estado"
                                           T="int?"
                                           Clearable="true"
                                           AdornmentIcon="@Icons.Material.Filled.Flag"
                                           Adornment="Adornment.Start">
                                    <MudSelectItem T="int?" Value="1">Pendiente</MudSelectItem>
                                    <MudSelectItem T="int?" Value="2">En Proceso</MudSelectItem>
                                    <MudSelectItem T="int?" Value="3">Completado</MudSelectItem>
                                    <MudSelectItem T="int?" Value="4">Cancelado</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="2">
                                <MudDatePicker @bind-Date="filtroFechaInicio"
                                               Label="Fecha Inicio"
                                               DateFormat="dd/MM/yyyy"
                                               Clearable="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="1">
                                <MudButton Variant="Variant.Outlined"
                                           Color="Color.Primary"
                                           FullWidth="true"
                                           StartIcon="@Icons.Material.Filled.Search"
                                           OnClick="@BuscarTraslados">
                                    Filtrar
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
            <!-- Data Table -->
            <MudItem xs="12">
                <MudDataGrid T="Traslado"
                             Items="@traslados"
                             Filterable="true"
                             FilterMode="DataGridFilterMode.ColumnFilterRow"
                             SortMode="SortMode.Multiple"
                             Pageable="true"
                             RowsPerPage="10"
                             MultiSelection="false"
                             Loading="@loading"
                             LoadingProgressColor="Color.Info">

                    <Columns>
                        <PropertyColumn Property="x => x.IdTraslado" Title="ID" Sortable="true" />

                        <TemplateColumn Title="Sucursal Origen" Sortable="false">
                            <CellTemplate>
                                <MudChip Color="Color.Primary" Size="Size.Small" Variant="Variant.Text">
                                    @context.Item.IdSucursalOrigenNavigation?.NombreSucursal
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Sucursal Destino" Sortable="false">
                            <CellTemplate>
                                <MudChip Color="Color.Secondary" Size="Size.Small" Variant="Variant.Text">
                                    @context.Item.IdSucursalDestinoNavigation?.NombreSucursal
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Fecha" Sortable="true">
                            <CellTemplate>
                                @if (context.Item.FechaTraslado.HasValue)
                                {
                                    <MudText Typo="Typo.body2">
                                        @context.Item.FechaTraslado.Value.ToString("dd/MM/yyyy HH:mm")
                                    </MudText>
                                }
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Estado" Sortable="true">
                            <CellTemplate>
                                @{
                                    var estadoColor = GetEstadoColor(context.Item.IdEstadoTraslado);
                                    var estadoTexto = GetEstadoTexto(context.Item.IdEstadoTraslado);
                                }
                                <MudChip Color="@estadoColor" Size="Size.Small">
                                    @estadoTexto
                                </MudChip>
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Observaciones" Sortable="false">
                            <CellTemplate>
                                @if (!string.IsNullOrEmpty(context.Item.Observaciones))
                                {
                                    <MudTooltip Text="@context.Item.Observaciones">
                                        <MudText Typo="Typo.body2" Style="max-width: 150px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                            @context.Item.Observaciones
                                        </MudText>
                                    </MudTooltip>
                                }
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Acciones" Sortable="false">
                            <CellTemplate>
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                                   Color="Color.Primary"
                                                   Size="Size.Small"
                                                   OnClick="@(() => VerDetalleTraslado(context.Item.IdTraslado))"
                                                   Title="Ver Detalle" />

                                    @if (context.Item.IdEstadoTraslado == 1) // Pendiente
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                       Color="Color.Info"
                                                       Size="Size.Small"
                                                       OnClick="@(() => EditarTraslado(context.Item.IdTraslado))"
                                                       Title="Editar" />

                                        <MudIconButton Icon="@Icons.Material.Filled.PlayArrow"
                                                       Color="Color.Success"
                                                       Size="Size.Small"
                                                       OnClick="@(() => ProcesarTraslado(context.Item.IdTraslado))"
                                                       Title="Procesar" />

                                        <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                                       Color="Color.Error"
                                                       Size="Size.Small"
                                                       OnClick="@(() => CancelarTraslado(context.Item.IdTraslado))"
                                                       Title="Cancelar" />
                                    }

                                    @if (context.Item.IdEstadoTraslado == 2) // En proceso
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.CheckCircle"
                                                       Color="Color.Success"
                                                       Size="Size.Small"
                                                       OnClick="@(() => ConfirmarRecepcion(context.Item.IdTraslado))"
                                                       Title="Confirmar Recepción" />
                                    }
                                </MudButtonGroup>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="Traslado" />
                    </PagerContent>
                </MudDataGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    private List<Traslado> traslados = new();
    private List<Sucursal> sucursales = new();
    private bool loading = true;

    // Filtros
    private string searchString = "";
    private int? filtroSucursalOrigen;
    private int? filtroSucursalDestino;
    private int? filtroEstado;
    private DateTime? filtroFechaInicio;

    // Estadísticas
    private int totalTraslados = 0;
    private int trasladosPendientes = 0;
    private int trasladosCompletados = 0;
    private int trasladosCancelados = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            await Task.WhenAll(
                LoadTraslados(),
                LoadSucursales(),
                LoadEstadisticas()
            );
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadTraslados()
    {
        try
        {
            traslados = await TrasladoServices.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar traslados: {ex.Message}");
            Snackbar.Add("Error al cargar traslados", Severity.Error);
            traslados = new List<Traslado>();
        }
    }

    private async Task LoadSucursales()
    {
        try
        {
            sucursales = await SucursalServices.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar sucursales: {ex.Message}");
            Snackbar.Add("Error al cargar sucursales", Severity.Error);
            sucursales = new List<Sucursal>();
        }
    }

    private async Task LoadEstadisticas()
    {
        try
        {
            var stats = await TrasladoServices.GetEstadisticasTrasladosAsync();
            totalTraslados = (int)(stats.GetValueOrDefault("TotalTraslados", 0));
            trasladosPendientes = (int)(stats.GetValueOrDefault("TrasladosPendientes", 0));
            trasladosCompletados = (int)(stats.GetValueOrDefault("TrasladosCompletados", 0));
            trasladosCancelados = (int)(stats.GetValueOrDefault("TrasladosCancelados", 0));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar estadísticas: {ex.Message}");
        }
    }

    private async Task OnSearchChanged(string searchValue)
    {
        searchString = searchValue;
        await BuscarTraslados();
    }

    private async Task BuscarTraslados()
    {
        loading = true;
        try
        {
            var resultados = await TrasladoServices.GetAllAsync();

            // Aplicar filtros
            if (!string.IsNullOrEmpty(searchString))
            {
                resultados = resultados.Where(t =>
                    (t.IdSucursalOrigenNavigation?.NombreSucursal?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (t.IdSucursalDestinoNavigation?.NombreSucursal?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (t.Observaciones?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
                ).ToList();
            }

            if (filtroSucursalOrigen.HasValue)
            {
                resultados = resultados.Where(t => t.IdSucursalOrigen == filtroSucursalOrigen.Value).ToList();
            }

            if (filtroSucursalDestino.HasValue)
            {
                resultados = resultados.Where(t => t.IdSucursalDestino == filtroSucursalDestino.Value).ToList();
            }

            if (filtroEstado.HasValue)
            {
                resultados = resultados.Where(t => t.IdEstadoTraslado == filtroEstado.Value).ToList();
            }

            if (filtroFechaInicio.HasValue)
            {
                resultados = resultados.Where(t => t.FechaTraslado?.Date >= filtroFechaInicio.Value.Date).ToList();
            }

            traslados = resultados;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en búsqueda: {ex.Message}");
            Snackbar.Add("Error al buscar traslados", Severity.Error);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task FiltrarPorEstado(int estadoId)
    {
        filtroEstado = estadoId;
        await BuscarTraslados();
    }

    private void VerDetalleTraslado(int trasladoId)
    {
        NavigationManager.NavigateTo($"/traslados/detalle/{trasladoId}");
    }

    private void EditarTraslado(int trasladoId)
    {
        NavigationManager.NavigateTo($"/traslados/editar/{trasladoId}");
    }

    private async Task ProcesarTraslado(int trasladoId)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "¿Está seguro de que desea procesar este traslado? Esta acción actualizará los inventarios.",
            ["ButtonText"] = "Procesar",
            ["Color"] = Color.Success
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Confirmar Procesamiento", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var success = await TrasladoServices.UpdateEstadoTrasladoAsync(trasladoId, 2); // En proceso
                if (success)
                {
                    Snackbar.Add("Traslado procesado exitosamente", Severity.Success);
                    await LoadData();
                }
                else
                {
                    Snackbar.Add("Error al procesar el traslado", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al procesar traslado: {ex.Message}");
                Snackbar.Add("Error al procesar el traslado", Severity.Error);
            }
        }
    }

    private async Task ConfirmarRecepcion(int trasladoId)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "¿Confirma la recepción de este traslado?",
            ["ButtonText"] = "Confirmar",
            ["Color"] = Color.Success
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Confirmar Recepción", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var success = await TrasladoServices.ConfirmarRecepcionTrasladoAsync(trasladoId);
                if (success)
                {
                    Snackbar.Add("Recepción confirmada exitosamente", Severity.Success);
                    await LoadData();
                }
                else
                {
                    Snackbar.Add("Error al confirmar la recepción", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al confirmar recepción: {ex.Message}");
                Snackbar.Add("Error al confirmar la recepción", Severity.Error);
            }
        }
    }

    private async Task CancelarTraslado(int trasladoId)
    {
        // Aquí podrías implementar un diálogo personalizado para solicitar el motivo de cancelación
        var parameters = new DialogParameters
        {
            ["ContentText"] = "¿Está seguro de que desea cancelar este traslado?",
            ["ButtonText"] = "Cancelar Traslado",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Cancelar Traslado", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var success = await TrasladoServices.CancelarTrasladoAsync(trasladoId, "Cancelado por el usuario");
                if (success)
                {
                    Snackbar.Add("Traslado cancelado exitosamente", Severity.Success);
                    await LoadData();
                }
                else
                {
                    Snackbar.Add("Error al cancelar el traslado", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cancelar traslado: {ex.Message}");
                Snackbar.Add("Error al cancelar el traslado", Severity.Error);
            }
        }
    }

    private Color GetEstadoColor(int? estadoId)
    {
        return estadoId switch
        {
            1 => Color.Warning,   // Pendiente
            2 => Color.Info,      // En proceso
            3 => Color.Success,   // Completado
            4 => Color.Error,     // Cancelado
            _ => Color.Default
        };
    }

    private string GetEstadoTexto(int? estadoId)
    {
        return estadoId switch
        {
            1 => "Pendiente",
            2 => "En Proceso",
            3 => "Completado",
            4 => "Cancelado",
            _ => "Desconocido"
        };
    }
}